{"name":"ListViewAnimations","tagline":"Easily add animations to your ListView items!","body":"ListViewAnimations ([Play Store Demo][1]) [![Build Status](https://travis-ci.org/nhaarman/ListViewAnimations.svg)](https://travis-ci.org/nhaarman/ListViewAnimations)\r\n===========\r\n\r\nListViewAnimations is an Open Source Android library that allows developers to easily create ListViews with animations.\r\nFeel free to use it all you want in your Android apps provided that you cite this project and include the license in your app.\r\n\r\nFeatures\r\n-----\r\nListViewAnimations provides the following features:\r\n* Appearance animations for items in `ListViews`, `GridViews`, other `AbsListViews`;\r\n    * Built in animations include `Alpha`, `SwingRightIn`, `SwingLeftIn`, `SwingBottomIn`, `SwingRightIn` and `ScaleIn`.\r\n\t* Other animations can easily be added\r\n    * StickyListHeaders is supported, other implementations can easily be added.\r\n* Swipe-to-Dismiss, Swipe-To-Dismiss with contextual undo;\r\n* Drag-and-Drop reordering;\r\n* Animate dismissal of items;\r\n* Animate addition of items;\r\n* Smoothly expand your items to reveal more content;\r\n\r\n![](https://github.com/nhaarman/ListViewAnimations/raw/master/demo.gif \"Demo gif\")\r\n\r\nSetup\r\n-----\r\n\r\nThe library consists of separate modules:\r\n\r\n* `lib-core`: The core of the library, and contains appearance animations.\r\n* `lib-manipulation`: Contains the item manipulation options, such as Swipe-to-Dismiss, and Drag-and-Drop.\r\n* `lib-core-slh`: An extension of `lib-core` to support `StickyListHeaders`.\r\n\r\nWhen using `lib-manipulation` or `lib-core-slh`, `lib-core` is included as well.\r\n\r\nAdd the following to your `build.gradle`:\r\n\r\n\trepositories {\r\n\t\tmavenCentral()\r\n\t}\r\n\t\r\n\tdependencies {\r\n\t\tcompile 'com.nhaarman.listviewanimations:lib-core:3.0.+'\r\n\t\tcompile 'com.nhaarman.listviewanimations:lib-manipulation:3.0.+'\r\n\t\tcompile 'com.nhaarman.listviewanimations:lib-core-slh:3.0.+'\r\n\t}\r\n\r\n**Or**:\r\n\r\n* Download the jar files you need:\r\n    * [`lib-core`][8]\r\n    * [`lib-manipulation`][9]\r\n    * [`lib-core-slh`][10]\r\n* [Download the latest NineOldAndroids .jar file][6]\r\n* Add the .jar files to your project's `libs` folder, or add them as external jars to your project's build path.\r\n\r\n**Or**:\r\n\r\nAdd the following to your `pom.xml`:\r\n\r\n\t<dependency>\r\n\t\t<groupId>com.nhaarman.listviewanimations</groupId>\r\n\t\t<artifactId>lib-core</artifactId>\r\n\t\t<version>3.0.0</version>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>com.nhaarman.listviewanimations</groupId>\r\n\t\t<artifactId>lib-manipulation</artifactId>\r\n\t\t<version>3.0.0</version>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>com.nhaarman.listviewanimations</groupId>\r\n\t\t<artifactId>lib-core-slh</artifactId>\r\n\t\t<version>3.0.0</version>\r\n\t</dependency>\r\n\t\r\nContribute\r\n-----\r\nPlease do! I'm happy to review and accept pull requests.  \r\nPlease read [Contributing](https://github.com/nhaarman/ListViewAnimations/blob/master/CONTRIBUTING.md) before you do.\r\n\r\nDeveloped By\r\n-----\r\n* Niek Haarman\r\n\r\n***\r\n\r\n# Getting started\r\n\r\nAssuming you have included the library as described above, the next section describes how you can get started with adding animations to your ListViews.\r\n\r\n* [Appearance animations](http://nhaarman.github.io/ListViewAnimations#appearance-animations)\r\n* [DynamicListView](http://nhaarman.github.io/ListViewAnimations#dynamiclistview)\r\n  * [Drag and drop](http://nhaarman.github.io/ListViewAnimations#draganddrop)\r\n  * [Swipe to dismiss](http://nhaarman.github.io/ListViewAnimations#swipetodismiss)\r\n  * [Swipe to dismiss with contextual undo](http://nhaarman.github.io/ListViewAnimations#Swipetodismisswithcontextualundo)\r\n* [StickyListHeaders](http://nhaarman.github.io/ListViewAnimations#stickylistheaders)\r\n\r\n***\r\n\r\n## Appearance animations\r\n\r\nThe classes in the `com.nhaarman.listviewanimations.appearance` package provide a way for you to add more fancyness to your ListViews when showing data for the first time. Instead of snapping the items into view, the `AnimationAdapter` class lets you gradually present your items to the user:\r\n\r\n![Default behaviour on the left, animated behaviour on the right](https://raw.githubusercontent.com/nhaarman/ListViewAnimations/gh-pages/images/demo_appearance.gif)\r\n<sub>_Default behavior on the left, animated behaviour on the right._</sub>\r\n\r\nTo implement this behaviour, you need to wrap your original adapter in an `AlphaInAnimationAdapter`:\r\n\r\n```java\r\nMyAdapter myAdapter = new MyAdapter();\r\nAlphaInAnimationAdapter animationAdapter = new AlphaInAnimationAdapter(myAdapter);\r\nanimationAdapter.setAbsListView(mListView);\r\nmListView.setAdapter(animationAdapter);\r\n```\r\n\r\nYou can create your own `AnimationAdapter` implementation, or use one of the predefined ones:\r\n* `AlphaAnimationAdapter`\r\n* `ScaleInAnimationAdapter`\r\n* `SwingBottomInAnimationAdapter`\r\n* `SwingLeftInAnimationAdapter`\r\n* `SwingRightInAnimationAdapter`\r\n\r\n***\r\n\r\n## DynamicListView\r\n\r\nThe `DynamicListView` is a convenience class which provides drag and drop, swipe to dismiss and insertion animation functionality. It has been designed to combine these features in a most optimal way:\r\n\r\n![The DynamicListView in action](https://raw.githubusercontent.com/nhaarman/ListViewAnimations/gh-pages/images/dynamiclistview.gif)\r\n<sub>_The DynamicListView in action._</sub>\r\n\r\nTo use the `DynamicListView`, include the following in your xml layout:\r\n\r\n```xml\r\n<com.nhaarman.listviewanimations.itemmanipulation.DynamicListView\r\n        android:id=\"@+id/dynamiclistview\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n```\r\n\r\n### Drag and drop\r\n\r\nTo enable drag and drop, simply call `enableDragAndDrop()` on your `DynamicListView`, and specify when items are draggable. To specify a child view which can be touched to initiate a drag, you can use a `TouchViewDraggableManager`:\r\n\r\n```java\r\nmDynamicListView.enableDragAndDrop();\r\nmDynamicListView.setDraggableManager(new TouchViewDraggableManager(R.id.itemrow_gripview));\r\n```\r\n\r\nYou can also initiate a drag by calling `startDragging(int)`, for example in an `OnItemLongClickListener`:\r\n\r\n```java\r\nmDynamicListView.enableDragAndDrop();\r\nmDynamicListView.setOnItemLongClickListener(\r\n    new OnItemLongClickListener() {\r\n        @Override\r\n        public boolean onItemLongClick(final AdapterView<?> parent, final View view,\r\n                                       final int position, final long id) {\r\n            mDynamicListView.startDragging(position);\r\n            return true;\r\n        }\r\n    }\r\n);\r\n```\r\n<sub>Note that drag and drop functionality is only available on devices running ICS (API 14) and above.</sub>\r\n\r\n### Swipe to dismiss\r\nTo enable swipe to dismiss, call `enableSwipeToDismiss(OnDismissCallback)` on your `DynamicListView`. The `OnDismissCallback` you must supply is notified of dismissed items, and is responsible for deleting those items from the dataset:\r\n\r\n```java\r\nmDynamicListView.enableSwipeToDismiss(\r\n    new OnDismissCallback() {\r\n        @Override\r\n        public void onDismiss(@NonNull final ViewGroup listView, @NonNull final int[] reverseSortedPositions) {\r\n            for (int position : reverseSortedPositions) {\r\n                mAdapter.remove(position);\r\n            }\r\n        }\r\n    }\r\n);\r\n```\r\n\r\n### Swipe to dismiss with contextual undo\r\nTo enable swipe to dismiss with contextual undo, you can wrap your adapter in either a `SimpleSwipeUndoAdapter`, or a `TimedUndoAdapter`. The latter will automatically dismiss an item after a while when it has been brought into the undo state.\r\n\r\n```java\r\nMyAdapter myAdapter = new MyAdapter();\r\nSimpleSwipeUndoAdapter swipeUndoAdapter = new SimpleSwipeUndoAdapter(myAdapter, MyActivity.this,\r\n    new OnDismissCallback() {\r\n        @Override\r\n        public void onDismiss(@NonNull final ViewGroup listView, @NonNull final int[] reverseSortedPositions) {\r\n            for (int position : reverseSortedPositions) {\r\n                mAdapter.remove(position);\r\n            }\r\n        }\r\n    }\r\n);\r\nswipeUndoAdapter.setAbsListView(mDynamicListView);\r\nmDynamicListView.setAdapter(swipeUndoAdapter);\r\nmDynamicListView.enableSimpleSwipeUndo();\r\n```\r\n\r\n### Animate addition\r\nThe `DynamicListView` can also animate the addition of items in your dataset. To use this functionality, simply let your adapter implement `Insertable`, and call one of the `insert` methods on the `DynamicListView`:\r\n\r\n```java\r\nMyInsertableAdapter myAdapter = new MyInsertableAdapter(); // MyInsertableAdapter implements Insertable\r\nmDynamicListView.setAdapter(myAdapter);\r\nmDynamicListView.insert(0, myItem); // myItem is of the type the adapter represents.\r\n```\r\n\r\n***\r\n\r\n## StickyListHeaders\r\n\r\nListViewAnimations also supports appearance animations on `StickyListHeaderListView`s. You must wrap your `AnimationAdapter` in a `StickyListHeadersAdapterDecorator`:\r\n\r\n```java\r\nStickyListHeadersListView listView = (...);\r\nAlphaInAnimationAdapter animationAdapter = new AlphaInAnimationAdapter(adapter);\r\nStickyListHeadersAdapterDecorator stickyListHeadersAdapterDecorator = new StickyListHeadersAdapterDecorator(animationAdapter);\r\nstickyListHeadersAdapterDecorator.setStickyListHeadersListView(listView);\r\nlistView.setAdapter(stickyListHeadersAdapterDecorator);\r\n```\r\n\r\nJust like with the normal `ListView`, you can use any implementation of the `AnimationAdapter` class.\r\n\r\n***\r\n\r\nSpecial Thanks\r\n-----\r\n* DevBytes - Drag-and-Drop reordering is done by a rewritten version of their [DynamicListView][5].\r\n* Jake Warthon - To support devices pre-HC (<3.0), a copy of [NineOldAndroids][2] is included.\r\n* [Contributors][7]\r\n\r\nLicense\r\n-----\r\n\r\n\tCopyright 2014 Niek Haarman\r\n\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\r\n\tyou may not use this file except in compliance with the License.\r\n\tYou may obtain a copy of the License at\r\n\r\n\thttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\tUnless required by applicable law or agreed to in writing, software\r\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\r\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\tSee the License for the specific language governing permissions and\r\n\tlimitations under the License.\r\n\r\n [1]: https://play.google.com/store/apps/details?id=com.haarman.listviewanimations\r\n [2]: http://nineoldandroids.com/\r\n [3]: http://en.wikipedia.org/wiki/Decorator_pattern\r\n [5]: http://youtu.be/_BZIvjMgH-Q\r\n [6]: https://github.com/JakeWharton/NineOldAndroids/downloads\r\n [7]: https://github.com/nhaarman/ListViewAnimations/graphs/contributors\r\n [8]: https://github.com/nhaarman/ListViewAnimations/releases/download/3.0.0/listviewanimations_lib-core_3.0.0.jar\r\n [9]: https://github.com/nhaarman/ListViewAnimations/releases/download/3.0.0/listviewanimations_lib-manipulation_3.0.0.jar\r\n [10]: https://github.com/nhaarman/ListViewAnimations/releases/download/3.0.0/listviewanimations_lib-core-slh_3.0.0.jar\r\n [11]: https://github.com/nhaarman/ListViewAnimations/wiki\r\n [12]: http://nhaarman.github.io/ListViewAnimations/javadoc/3.0.0/lib-core\r\n [13]: http://nhaarman.github.io/ListViewAnimations/javadoc/3.0.0/lib-manipulation\r\n [14]: http://nhaarman.github.io/ListViewAnimations/javadoc/3.0.0/lib-core-slh\r\n","google":"UA-39653306-5","note":"Don't delete this file! It's used internally to help with page regeneration."}